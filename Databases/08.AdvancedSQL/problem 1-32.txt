1. Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company:
SELECT FirstName, LastName, Salary
FROM Employees
WHERE Salary = 
  (SELECT MIN(Salary) FROM Employees)
  
2. Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company:
SELECT FirstName, LastName, Salary
FROM Employees
WHERE Salary <= 
  1.1 * (SELECT MIN(Salary) FROM Employees)
  
3. Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department:
SELECT e.FirstName + ' ' + e.LastName AS [Full Name], e.Salary, d.Name AS [Department Name]
FROM Employees e, Departments d
WHERE Salary IN 
	(SELECT MIN(e.Salary) FROM Employees e
	WHERE e.DepartmentID = d.DepartmentID)
	
4. Write a SQL query to find the average salary in the department #1:
SELECT AVG(Salary) AS [Average Department Salary]
FROM Employees
WHERE DepartmentID = 1

5. Write a SQL query to find the average salary in the "Sales" department:
SELECT d.Name AS [Department Name], AVG(e.Salary) AS [Average Salary]
FROM Employees e, Departments d
WHERE e.DepartmentID = d.DepartmentID AND d.Name = 'Sales'
GROUP by d.Name

6. Write a SQL query to find the number of employees in the "Sales" department:
SELECT d.Name AS [Department Name], COUNT(e.FirstName) AS [Workers]
FROM Employees e, Departments d
WHERE e.DepartmentID = d.DepartmentID AND d.Name = 'Sales'
GROUP by d.Name

7. Write a SQL query to find the number of all employees that have manager:
SELECT COUNT(*) AS [Number of employees]
FROM Employees e
WHERE e.ManagerID IS NOT NULL

8. Write a SQL query to find the number of all employees that have no manager:
SELECT COUNT(*) AS [Number of employees]
FROM Employees e
WHERE e.ManagerID IS NULL

9. Write a SQL query to find all departments and the average salary for each of them:
SELECT d.Name AS [Department Name], AVG(e.Salary) AS [Average Salary]
FROM Employees e, Departments d
WHERE e.DepartmentID = d.DepartmentID
GROUP BY d.Name
ORDER BY AVG(e.Salary)

10. Write a SQL query to find the count of all employees in each department and for each town:
SELECT d.Name AS [Department Name], t.Name AS [Town name],
COUNT(a.TownID) AS [Employees in town]
FROM Employees e, Departments d, Towns t, Addresses a
WHERE e.DepartmentID = d.DepartmentID AND e.AddressID = a.AddressID AND a.TownID = t.TownID
GROUP BY d.Name, t.Name

11. Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name:
SELECT e.FirstName + ' ' + e.LastName AS [Manager name]
FROM Employees e 
WHERE e.EmployeeID IN 
(SELECT e.ManagerID FROM Employees e
GROUP BY e.ManagerID 
HAVING COUNT(*) = 5)

12. Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)":
SELECT e.FirstName + ' ' + e.LastName as [Employee Name],
	ISNULL(m.FirstName + ' ' + m.LastName, '(no manger)') as [Manager Name]
FROM Employees e
	LEFT OUTER JOIN Employees m
	ON	e.ManagerID = m.EmployeeID

13. Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function:
SELECT e.FirstName + ' ' + e.LastName as [Employee Name]
FROM Employees e
WHERE LEN(e.LastName) = 5

14. Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds":
SELECT CONVERT(VARCHAR(50),GETDATE(),3) + ' ' + CONVERT(VARCHAR(50),GETDATE(),14)

15. Write a SQL statement to create a table Users. Users should have username, password, full name and last login time:
16. Write a SQL statement to create a view that displays the users from the Users table that have been in the system today:
CREATE TABLE Users (
[ID] int IDENTITY,
[Username] nvarchar(50) NOT NULL UNIQUE,
[Password] nvarchar(50) NOT NULL,
[Full Name] nvarchar(100) NOT NULL,
[Last login time] smalldatetime,
CONSTRAINT PK_Users PRIMARY KEY(ID), 
CONSTRAINT PASSWORD_CK CHECK (DATALENGTH([Password]) >= 5)
)
GO
CREATE VIEW [First 10 Users] AS
SELECT TOP 10 Username FROM Users

17. Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint):
CREATE TABLE Group (
[ID] int NOT NULL PRIMARY KEY IDENTITY,
[Name] nvarchar(50) NOT NULL UNIQUE
)

18. Write a SQL statement to add a column GroupID to the table Users:
ALTER TABLE Users ADD GroupID int

18.1.: Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.
ALTER TABLE Users
ADD CONSTRAINT FK_Users_Groups 
FOREIGN KEY(GroupID)
REFERENCES Groups(ID)

19. Write SQL statements to insert several records in the Users and Groups tables:
INSERT INTO Users([Username], [Password], [Full Name], [Last login time], [GroupID])
VALUES
('Pesho', '1234', 'Pesho Peshov', '2000-01-11 00:00:00', '8')

INSERT INTO Groups([Name])
VALUES
('Group1')

20. Write SQL statements to update some of the records in the Users and Groups tables:
UPDATE Users
SET [Full Name] = 'Gosho Goshov'
WHERE [Full Name] = 'Pesho Peshov'

UPDATE Groups
SET Name = 'Group69'
WHERE [Name] = 'Group1'

21. Write SQL statements to delete some of the records from the Users and Groups tables:
DELETE FROM Users
WHERE Username = 'Pesho'

DELETE FROM Groups
WHERE Name = 'Group69'

22. Write SQL statements to insert in the Users table the names of all employees from the Employees table:
INSERT INTO Users ([Username], [Password], [Full Name])
SELECT LOWER(LEFT(e.FirstName, 1) + e.LastName), LOWER(LEFT(e.FirstName, 1) + e.LastName),
e.FirstName + ' ' + e.LastName
FROM Employees e

23. Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010:
UPDATE Users
SET [Password] = NULL
WHERE CONVERT(datetime, [Last login time], 1) < CONVERT(datetime, '03/10/10', 1) OR [Last login time] IS NULL

24. Write a SQL statement that deletes all users without passwords (NULL password):
DELETE FROM Users
WHERE [Password] IS NULL

25. Write a SQL query to display the average employee salary by department and job title:
SELECT AVG(e.Salary) AS [Average Salary], d.Name AS [Department], e.JobTitle
FROM Employees e, Departments d
WHERE e.DepartmentID = d.DepartmentID
GROUP BY e.DepartmentID, e.JobTitle, d.Name

26. Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it:
SELECT MIN(e.Salary) as [Minimum Salary], d.Name as [Department Name], e.JobTitle, (
	SELECT TOP(1) em.FirstName + ' ' + em.LastName
	FROM Employees em
	WHERE em.Salary = MIN(e.Salary)) as [Employee]
FROM Employees e, Departments d
WHERE e.DepartmentID = d.DepartmentID
GROUP BY e.DepartmentID, e.JobTitle, d.Name

27. Write a SQL query to display the town where maximal number of employees work:
SELECT ta.Name as [Most Common Town]
FROM Towns ta
WHERE ta.TownID = (
	SELECT TOP(1) a.TownID
	FROM Employees e
		JOIN Addresses a
			ON a.AddressID = e.AddressID
		JOIN Towns t
			ON a.TownID = t.TownID
	GROUP BY a.TownID, t.Name
	ORDER BY COUNT(*) DESC)
	
28. Write a SQL query to display the number of managers from each town:
SELECT TOP(1) t.Name as [Town Name], COUNT(*) as [Managers]
FROM Employees e, Addresses a, Towns t
WHERE e.EmployeeID IN (
	SELECT m.ManagerID
	FROM Employees m) AND
	e.AddressID = a.AddressID AND
	a.TownID = t.TownID
GROUP BY t.Name 
ORDER BY COUNT(*) DESC

29. Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments):
CREATE TABLE WorkHours (
[ID] int IDENTITY PRIMARY KEY,
[EmployeeID] int,
[Date] datetime,
[Task] nvarchar(200),
[Hours] int,
[Comments] text
)

ALTER TABLE WorkHours
ADD CONSTRAINT FK_WorkHours_Employees
FOREIGN KEY(EmployeeID)
REFERENCES Employees(EmployeeID)

CREATE TABLE WorkHoursLogs (
[ID] int IDENTITY PRIMARY KEY,
[Change Time] datetime,
[Change Type] nvarchar(50))

30. Start a database transaction, delete all employees from the 'Sales' department along with all dependent records from the pother tables:
31. Start a database transaction and drop the table EmployeesProjects:
32. Find how to use temporary tables in SQL Server:
USE TelerikAcademy
GO
CREATE TRIGGER ONINSERT
ON TelerikAcademy.dbo.WorkHours
AFTER INSERT
AS
	INSERT INTO TelerikAcademy.dbo.WorkHoursLogs 
		VALUES(GETDATE(), 'INSERT')
GO
CREATE TRIGGER ONUPDATE
ON TelerikAcademy.dbo.WorkHours
AFTER UPDATE
AS
	INSERT INTO TelerikAcademy.dbo.WorkHoursLogs 
		VALUES(GETDATE(), 'UPDATE')
GO
CREATE TRIGGER ONDELETE
ON TelerikAcademy.dbo.WorkHours
AFTER DELETE
AS
	INSERT INTO TelerikAcademy.dbo.WorkHoursLogs 
		VALUES(GETDATE(), 'DELETE')

 GO

 USE TelerikAcademy
 INSERT INTO WorkHours ([Date])
	VALUES(GETDATE())

USE TelerikAcademy

BEGIN TRANSACTION
DELETE FROM Users
ROLLBACK TRANSACTION